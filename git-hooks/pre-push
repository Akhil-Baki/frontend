#!/usr/bin/env node
/* eslint-disable no-console */

const fs = require('fs');
const { promisify } = require('util');
const path = require('path');
const execa = require('execa');
const chalk = require('chalk');
const getChangedFiles = require('../tools/__tasks__/lib/get-changed-files');

const writeFile = promisify(fs.writeFile);

const confirmIfMainMessage = `${chalk.red(
    `${chalk.inverse(
        'You are about to push main!'
    )}\nIs that what you intended?`
)} [y/N]`;
const confirmIfMain = execa
    .shell(
        `
        protected_branch='main'
        current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\\(.*\\),\\1,')

        if [ $protected_branch = $current_branch ]
        then
            read -p "${confirmIfMainMessage}" -n 1 -r < /dev/tty
            echo
            if echo $REPLY | grep -E '^[Yy]$' > /dev/null
            then
                exit 0 # push will execute
            fi
            exit 1 # push will not execute
        else
            exit 0 # push will execute
        fi
        `,
        {
            stdio: 'inherit',
        }
    )
    .catch(() => Promise.reject(new Error('Ok, stopping ðŸ˜‰')));
const validate = () => {
    try {
        const nvmrcVersion = fs.readFileSync('.nvmrc', 'utf8').trim();
        const nodePath = `${process.env.HOME}/.nvm/versions/node/v${nvmrcVersion}/bin/node`;

        return execa(
            nodePath, // Use dynamically constructed nodePath
            ['./tools/task-runner/runner.mjs', 'validate-head/index.mjs'],
            {
                stdio: 'inherit',
            }
        );
    } catch (error) {
        console.error(chalk.red(`Error reading .nvmrc: ${error.message}`));
        console.error(chalk.red(`Falling back to default node execution, which might fail.`));
        // If .nvmrc reading fails, we fall back to the original execa call (without explicit node path)
        return execa(
            './tools/task-runner/runner.mjs',
            ['validate-head/index.mjs'],
            {
                stdio: 'inherit',
            }
        );
    }
};
const checkYarnLock = changed => {
    if (
        changed.some(file => file === 'package.json') &&
        !changed.some(file => file === 'yarn.lock')
    ) {
        return Promise.reject(
            new Error(
                `${chalk.red(
                    `${chalk.underline(
                        'package.json'
                    )} has changed but ${chalk.underline(
                        'yarn.lock'
                    )} is not included in this commit.`
                )}\n${chalk.dim(
                    `If this is intentional, commit this change with --no-verify.`
                )}`
            )
        );
    }
    return changed;
}; // make sure docs TOC stays up to date
const updateTOC = changed => {
    if (changed.some(file => file.includes('docs/'))) {
        const docs = path.resolve('docs');
        const readme = path.resolve(docs, 'README.md');
        return execa
            .stdout(path.resolve(docs, 'generate-toc.sh'))
            .then(toc => writeFile(readme, toc, 'utf8'))
            .then(() => execa.sync('git', ['add', readme]))
            .then(() => changed);
    }
    return changed;
};
confirmIfMain
    .then(validate)
    .then(getChangedFiles)
    .then(checkYarnLock)
    .then(updateTOC)
    .catch(e => {
        console.log(`\n${e}\n`);
        process.exit(1);
    });
